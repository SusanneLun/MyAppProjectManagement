{/*handleRating = (stakeholder, newRating) => {
  let newStakeholdersState = [...this.state.stakeholders]
  const stakeholderIndex = newStakeholdersState.indexOf(stakeholder)
  newStakeholdersState[stakeholderIndex].ratings[ratings.length -1].power = newRating
  this.setState({
    stakeholders: newStakeholdersState
  })
}*/}


{ ratings:
  [
    ...stakeholder.ratings, //copy all the old ratings to persist them
    { // add a new ratings object
      ...newRatings, // first take all the new ratings we got passed as arguments
      ...stakeholder.ratings[ // fill it with any other ratings we had in the past
        stakeholder.ratings.length-1 // the latest rating is at the last index in the array
      ]
    }
  ]
}
),

componentDidMount() {

     const { match: { params } } = this.props

    APILogin.getStakeholderProjectInfo(params.stakeholder_id, params.project_id)
      .then(stakeholder => this.setState({
        name: stakeholder.stakeholder.name,
        alias: stakeholder.stakeholder.alias,
        title: stakeholder.stakeholder.title,
        note: stakeholder.stakeholder.note,
        power: stakeholder.ratings[stakeholder.ratings.length -1].power,
        interest: stakeholder.ratings[stakeholder.ratings.length -1].interest,
        positivity: stakeholder.ratings[stakeholder.ratings.length -1].positivity
          })
      )
}




// <div>
//   <label> Strategies: </label>
//   <p>{strategies[0] && strategies[strategies.length -1].option}</p>
// </div>


stakeholder.name &&


      fetch('http://localhost:3000/stakeholders')
      .then(res => res.json())
      .then(stakeholders => this.setState({ stakeholders: stakeholders}))


      .then(positivity => this.setState({ positivity:
        this.state.stakeholders.map(stakeholder => stakeholder.ratings[stakeholder.ratings.length -1].positivity)}))


        componentDidMount() {
          const { id } = this.props.match.params
          APILogin.getProjectStakeholders(id)
          .then(stakeholders => this.setState({ stakeholders: stakeholders}))
          }

          <div class="ui checkbox">
            <input type="checkbox" name="example">
            <label>Make my profile visible</label>
          </div>


          <FormControlLabel
            control={<Checkbox value="remember" color="primary" />}
            label="Remember me"
          />

          <div class="ui checkbox">
          <input type="checkbox" />

          <div>
          <Button onClick={() => this.props.history.goBack()} color="purple" className="back_button">Back</Button>
          </div>

          <div className={"new_project_submit"} >
          <Form.Button type="submit" color="purple"> Save Project </Form.Button>
          </div>
        </Form>
        <div className={"new_project_submit"}>
        <Form onSubmit={this.props.hideForm}>
        <Form.Button type="cancel" color="white" > Cancel </Form.Button>


        // updateStakeholder = (stakeholder, updatedRatings) => {
        //   let updatedStakeholder = {
        //     name: updatedStakeholder.name === "" ? stakeholder.name : updatedStakeholder.name,
        //     title: updatedStakeholder.title === "" ? stakeholder.title : updatedStakeholder.title,
        //     alias: updatedStakeholder.alias === "" ? stakeholder.alias : updatedStakeholder.alias,
        //     note: updatedStakeholder.note === "" ? stakeholder.note : updatedStakeholder.note
        //   }
        //   let updatedRating = {
        //     power: updatedRatings.power === "" ? stakeholder.ratings[stakeholder.ratings.length - 1].power : updatedRatings.power,
        //     interest: updatedRatings.interest === "" ? stakeholder.ratings[stakeholder.ratings.length - 1].interest : updatedRatings.interest,
        //     positivity: updatedRatings.positivity === "" ? stakeholder.ratings[stakeholder.ratings.length - 1].positivity : updatedRatings.positivity
        //   }
        // }


        , power: stakeholder.ratings[stakeholder.ratings.length -1].power,
        interest: stakeholder.ratings[stakeholder.ratings.length -1].interest,
        positivity: stakeholder.ratings[stakeholder.ratings.length -1].positivity

        static getProjectStakeholders (id, stakeholder_id) {
          return fetch(this.projectStakeholdersURL, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({project_id: id, stakeholder_id: stakeholder_id})
        }).then(resp => resp.json())
        }

        id: "",
        name: "",
        title: "",
        alias: "",
        note: "",
        power: "",
        interest: "",
        positivity: "",

        .then(stakeholder => this.setState({ id: stakeholder.id, name: stakeholder.name, alias: stakeholder.alias, title: stakeholder.title,
          note: stakeholder.note}))


  overflow-y: scroll;

  <div className={"search_stakeholders_wrapper"}>
  {!this.state.selectedStakeholder && <SearchBar updateFilter={this.updateFilter}/>}
  {
    this.state.selectedStakeholder
    ?
    <StakeholderSupport />
    :
    null}

getStakeholderProjectInfo = () => {

stakeholder: null,
project: null,
ratings: null,
strategies: null

{
  if (stakeholder.error) {
    alert(stakeholder.error)
  } else {


  const { stakeholder_id } = this.props.match.params
  const { project_id } = this.props.match.params


  <Form.Group widths='equal' >
    <Form.Input  name="name" fluid label="Name" type="text" onChange={event => this.handleChange(event)} value={this.state.name} />
    <Form.Input name="description" fluid label='Description' rows="5" type="text" onChange={this.handleChange}  value={this.state.description}/>
  </Form.Group>

  <div className="ui form">
  <div className="field">
    <label>Text</label>
    <textarea name="name" fluid label="Name" type="text" onChange={event => this.handleChange(event)} value={this.state.name} >
    </textarea>
  </div>
  <div className="field">
    <label>Short Text</label>
    <textarea rows="2" name="description" fluid label='Description' type="text" onChange={this.handleChange}  value={this.state.description}>
    </textarea>
  </div>
  </div>


  handleSubmit = (project, updatedValues) => {

      const { match: { params } } = this.props

      let updatedValue = {
          name: updatedValues.name === "" ? project.name : updatedValues.name,
          description: updatedValues.description === "" ? project.description : updatedValues.description,
          id: params.id
      }

      fetch(`http://localhost:3000/user_project/${params.id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify( updatedValue ),
        }).then(res => res.json())
        .then(project => {
          this.setState({
            name: project.name,
            description: project.description,
            id: params.id
            })})
      }

      .then(() => this.props.history.go(-1))

      <input name="power"
       type="text-field"
       placeholder='Change..'
       value={this.state.power}
       onChange={this.ratingField}
       />


       // <div>
       //   <label> Strategies: </label>
       //   <p>{strategies[0] && strategies[strategies.length -1].option}</p>
       // </div>

  <p>{strategies[0] && strategies[strategies.length -1].option}</p>

  handleChange = (event, data) => {
    this.setState({ [data.name]: data.value })
  }

<Button compact color='purple' onClick={this.viewStakeholder}>View</Button>

import React, { Component } from 'react'
import { Dropdown, Form, Select } from 'semantic-ui-react'



class DropdownStakeholders extends Component {
constructor() {
  super()
  this.state = {
    id: "",
    name: ""
  }
}


  handleChange = (event, data) => {
    this.setState({ [data.name]: data.value })
  }


render() {

  const options = this.props.stakeholders.map(stakeholder => stakeholder.name)

  return(
  <div>
  <Form.Group widths='equal' >
    <div className={"new_stakeholder_input"}>
      <label>Select Stakeholder</label>
      <Select name="name" text={options} label="Name" option=key{this.state.id} value{this.state.name}
        placeholder="Select" value={this.state.name}
        onChange={this.handleChange} />
    </div>
  </Form.Group>
  </div>
)}
}

//
// class DynamicSelect extends Component{
//     constructor(props){
//         super(props)
//     }
//
//     //On the change event for the select box pass the selected value back to the parent
//     handleChange = (event) =>
//     {
//         let selectedValue = event.target.value;
//         this.props.onSelectChange(selectedValue);
//     }
//
//     render(){
//         let arrayOfData = this.props.arrayOfData;
//         let options = arrayOfData.map((data) =>
//                 <option
//                     key={data.id}
//                     value={data.id}
//                 >
//                     {data.name}
//                 </option>
//             );
//
//             return (
//             <select name="customSearch" className="custom-search-select" onChange={this.handleChange}>
//                 <option>Select Item</option>
//                 {options}
//            </select>
//         )
//     }
// }


export default DropdownStakeholders

<DropdownSelect arrayOfData={this.props.stakeholders} onSelectChange={this.handleSelectChange} /> <br /><br />
<div>
  Selected value: {this.state.selectedValue}
</div>

import React, {Component} from 'react';

	class DropdownSelect extends Component {
	    constructor(props){
	        super(props)
	    }


	    //On the change event for the select box pass the selected value back to the parent
	    handleChange = (event) =>
	    {
	        let selectedValue = event.target.value;
	        this.props.onSelectChange(selectedValue);
	    }

	    render(){
	        const arrayOfData = this.props.stakeholders;
	        const options = arrayOfData.map((data) =>
	                <option
	                    key={data.id}
	                    value={data.id}
	                >
	                    {data.name}
	                </option>
	            );

	            return (
	            <select name="customSearch" className="custom-search-select" onChange={this.handleChange}>
	                <option>Select Stakeholder</option>
	                {options}
	           </select>
	        )
	    }
	}

	export default DropdownSelect;

  class DropdownStakeholders extends Component {
  constructor() {
    super()
    this.state = {
      id: "",
      name: ""
    }
  }

  <div>
  <Form.Group widths='equal' >
    <div className={"new_stakeholder_input"}>
      <label>Select Stakeholder</label>
      <Select text={options} key={data.id} value={data.id} options={options}
        placeholder="Select"
        onChange={this.handleChange} />
    </div>
  </Form.Group>
  </div>

[0]
  option: stakeholder.option[stakeholder.strategies.length -1].option
{strategies[0] && strategies[strategies.length -1].option}


  <Link to={"/manage_stakeholder/" + id}>{name}</Link>

  //From SupportChart under render
  <div>
  Selected value: {this.state.selectedValue}
  </div>


  const { match: { params } } = this.props
  const strategies = this.props.stakeholder.strategies

  {strategies.map(strategies => strategies.option)}

    const strategies = this.state.stakeholder.strategies

  <div>
    <label> Strategies:
    <p>
      {strategies.map(strategies => strategies.option)}
    </p>
    </label>

  </div>


{
  render() {
  const { option } = this.props.option

    return(
      <div>
      <Form>
      <div class="ui checkbox">
      <input type="checkbox" />
        <label>{option}</label>
      </div>
      </Form>
      </div>
    )
  }
  }


  <label>{option}</label>
