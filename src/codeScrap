{/*handleRating = (stakeholder, newRating) => {
  let newStakeholdersState = [...this.state.stakeholders]
  const stakeholderIndex = newStakeholdersState.indexOf(stakeholder)
  newStakeholdersState[stakeholderIndex].ratings[ratings.length -1].power = newRating
  this.setState({
    stakeholders: newStakeholdersState
  })
}*/}


{ ratings:
  [
    ...stakeholder.ratings, //copy all the old ratings to persist them
    { // add a new ratings object
      ...newRatings, // first take all the new ratings we got passed as arguments
      ...stakeholder.ratings[ // fill it with any other ratings we had in the past
        stakeholder.ratings.length-1 // the latest rating is at the last index in the array
      ]
    }
  ]
}
),


// <div>
//   <label> Strategies: </label>
//   <p>{strategies[0] && strategies[strategies.length -1].option}</p>
// </div>


stakeholder.name &&


      fetch('http://localhost:3000/stakeholders')
      .then(res => res.json())
      .then(stakeholders => this.setState({ stakeholders: stakeholders}))


      .then(positivity => this.setState({ positivity:
        this.state.stakeholders.map(stakeholder => stakeholder.ratings[stakeholder.ratings.length -1].positivity)}))


        componentDidMount() {
          const { id } = this.props.match.params
          APILogin.getProjectStakeholders(id)
          .then(stakeholders => this.setState({ stakeholders: stakeholders}))
          }

          <div class="ui checkbox">
            <input type="checkbox" name="example">
            <label>Make my profile visible</label>
          </div>


          <FormControlLabel
            control={<Checkbox value="remember" color="primary" />}
            label="Remember me"
          />

          <div class="ui checkbox">
          <input type="checkbox" />

          <div>
          <Button onClick={() => this.props.history.goBack()} color="purple" className="back_button">Back</Button>
          </div>

          <div className={"new_project_submit"} >
          <Form.Button type="submit" color="purple"> Save Project </Form.Button>
          </div>
        </Form>
        <div className={"new_project_submit"}>
        <Form onSubmit={this.props.hideForm}>
        <Form.Button type="cancel" color="white" > Cancel </Form.Button>


        // updateStakeholder = (stakeholder, updatedRatings) => {
        //   let updatedStakeholder = {
        //     name: updatedStakeholder.name === "" ? stakeholder.name : updatedStakeholder.name,
        //     title: updatedStakeholder.title === "" ? stakeholder.title : updatedStakeholder.title,
        //     alias: updatedStakeholder.alias === "" ? stakeholder.alias : updatedStakeholder.alias,
        //     note: updatedStakeholder.note === "" ? stakeholder.note : updatedStakeholder.note
        //   }
        //   let updatedRating = {
        //     power: updatedRatings.power === "" ? stakeholder.ratings[stakeholder.ratings.length - 1].power : updatedRatings.power,
        //     interest: updatedRatings.interest === "" ? stakeholder.ratings[stakeholder.ratings.length - 1].interest : updatedRatings.interest,
        //     positivity: updatedRatings.positivity === "" ? stakeholder.ratings[stakeholder.ratings.length - 1].positivity : updatedRatings.positivity
        //   }
        // }


        , power: stakeholder.ratings[stakeholder.ratings.length -1].power,
        interest: stakeholder.ratings[stakeholder.ratings.length -1].interest,
        positivity: stakeholder.ratings[stakeholder.ratings.length -1].positivity

        static getProjectStakeholders (id, stakeholder_id) {
          return fetch(this.projectStakeholdersURL, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({project_id: id, stakeholder_id: stakeholder_id})
        }).then(resp => resp.json())
        }

        id: "",
        name: "",
        title: "",
        alias: "",
        note: "",
        power: "",
        interest: "",
        positivity: "",

        .then(stakeholder => this.setState({ id: stakeholder.id, name: stakeholder.name, alias: stakeholder.alias, title: stakeholder.title,
          note: stakeholder.note}))


  overflow-y: scroll;

  <div className={"search_stakeholders_wrapper"}>
  {!this.state.selectedStakeholder && <SearchBar updateFilter={this.updateFilter}/>}
  {
    this.state.selectedStakeholder
    ?
    <StakeholderSupport />
    :
    null}

getStakeholderProjectInfo = () => {

stakeholder: null,
project: null,
ratings: null,
strategies: null

{
  if (stakeholder.error) {
    alert(stakeholder.error)
  } else {


  const { stakeholder_id } = this.props.match.params
  const { project_id } = this.props.match.params
